import React, { useEffect, useContext, useState } from 'react';
import { styled } from '@mui/material/styles';
import { TextField, Snackbar, Alert }  from '@mui/material'; // ,InputAdornment, IconButton
import Button from '@mui/material/Button';
import { Select, MenuItem } from "@mui/material";
import { generateClient } from "aws-amplify/data";
//@ts-ignore
import type { Schema } from "../amplify/data/resource";
import { useAuthenticator } from '@aws-amplify/ui-react'; //useAuthenticator,

// @ts-ignore
import { AuthContext } from "../context/AuthContext.jsx"
import { AuthenticationDetails } from 'amazon-cognito-identity-js';



const client = generateClient<Schema>();


const VisuallyHiddenInput = styled('input')({
    clip: 'rect(0 0 0 0)',
    clipPath: 'inset(50%)',
    height: 1,
    overflow: 'hidden',
    position: 'absolute',
    bottom: 0,
    left: 0,
    whiteSpace: 'nowrap',
    width: 1,
  });
  
  const Div = styled('div')({
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
  })
  
  const MainText = styled('h1')({
  
  })
  
  const SubText = styled('h3')({
    fontWeight: '300', // or do 400
    fontStyle: 'italic'
  })

  
  /*
  interface Auth {
    email: string;
    name: string;
  receivedFriendRequests: string[];   receivedFriendRequests: { id: string; status: string }[];
  }*/

  /*
  interface FriendRequest {
  id: string;
  senderId: string;
  timestamp: number;
  status: "pending" | "accepted" | "declined";
}

interface Auth {
  email: string;
  name: string;
  receivedFriendRequests: FriendRequest[];
}

  */

const UserSettings: React.FC = () => {
    const user = useAuthenticator();

    const [email, setEmail] = useState<string>("");
    const [name, setName] = useState<string>("");


    const [openSnackbar, setOpenSnackbar] = useState(false); // For MUI popup
    const authContext = useContext(AuthContext);


      useEffect(() => {
        if (authContext) {
          console.log("✅ AuthContext in Landing Page: ", authContext);
        } else {
          console.warn("❌ AuthContext is null or undefined.");
        }

        // @ts-ignore
        setName(authContext.name);
        // @ts-ignore
        setEmail(authContext.email)
      }, [authContext]);


      const submitForm = async(e: React.FormEvent) => {
        e.preventDefault();
        try {
          console.log('I MOG Skibidi Toilet! ');
        } catch (err) {
          console.error("Error with submit form: ", err);
        }
      }
 
    return (
    <>
    <Div>
    <MainText>Change your details</MainText>
    </Div>

      <Div>
    <form onSubmit={(e) => submitForm(e)}>
      <Div>
            <TextField
              label="User's Email"
              variant="outlined"
              fullWidth
              margin="normal"
            
          value={email}
          InputProps={{
            readOnly: true,
          }}
          onClick={() => setOpenSnackbar(true)}
          sx={{ width: '100%' }}
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)}

          />
          </Div>

      <Div>
            <TextField
              label="User's Name"
              variant="outlined"
              fullWidth
              margin="normal"
            
          value={name}
          sx={{ width: '100%' }}
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setName(String(e.target.value))}
            />
          </Div>
    </form>
    </Div>


    
    <Snackbar
        open={openSnackbar}
        autoHideDuration={3000}
        onClose={() => setOpenSnackbar(false)}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      >
        <Alert severity="info" onClose={() => setOpenSnackbar(false)} sx={{ width: '100%' }}>
          Not moddable yet – future update coming!
        </Alert>
      </Snackbar>
    </>
    )
}

export default UserSettings;